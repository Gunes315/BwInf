/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Guene
 */
public class schiebeparkplatz extends javax.swing.JFrame {

    /**
     * Creates new form schiebeparkplatz
     */
    public schiebeparkplatz() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        outputField = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        inputField = new javax.swing.JTextArea();
        mainButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        outputField.setColumns(20);
        outputField.setRows(5);
        jScrollPane1.setViewportView(outputField);

        inputField.setColumns(20);
        inputField.setRows(5);
        inputField.setText("A G\n2\nH 2\nI 5");
        jScrollPane2.setViewportView(inputField);

        mainButton.setText("Autos schieben");
        mainButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mainButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 213, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mainButton)
                .addGap(105, 105, 105))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(59, 59, 59)
                .addComponent(mainButton)
                .addContainerGap(131, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   //entire input
    public String[] input;

    //Cars A-?
    public String[] cars;

    //Horizontally parked cars (If car A is parked in 0 and 1 horiCars[0] and horiCars[1] is A)
    public String[] horiCars;
    public String[] tempHori;

    //Saves which cars can get out, without moving the horizontal cars
    public boolean[] parkFree;

    //Output with the information on how to move the horizontal cars, if necessary
    public String[] output;

    public void assignHorizontalCars() {
        int h = Integer.parseInt(input[1]);

        //Assign Car names of horizontally parked cars to StringArray horiCars
        //Repeat for number of horizontal cars
        for (int i = 2; i < 2 + h; i++) {
            int begSpace = Integer.parseInt(input[i].substring(2));
            String letter = input[i].substring(0, 1);
            horiCars[begSpace] = letter;
            horiCars[begSpace + 1] = letter;
        }
    }

    public boolean carFront(int car, String horiCars[]) {
        String a = horiCars[car];
        if (car >= 0 && car + 1 < horiCars.length && horiCars[car + 1] == a) {
            return false;
        }
        return true;
    }

    public void checkCars() {
        for (int i = 0; i < parkFree.length; i++) {
            if (horiCars[i] == null) {
                parkFree[i] = true;
            }
            parkFree[i] = false;

        }
    }

    public int getNumber(char letter) {
        //pia = Place in Alphabet
        int pia = 1 + (int) letter - (int) 'A';
        return pia;
    }

    public boolean moveLeft(int car, String horiCars[]) {

        if (carFront(car, horiCars) && car - 2 >= 0 && horiCars[car - 2] == null) {
            return true;
        } else if (!carFront(car, horiCars) && car - 1 >= 0 && car - 2 >= 0 && horiCars[car - 1] == null && horiCars[car - 2] == null) {
            return true;
        }
        return false;
    }

    public boolean moveLeft1(int car, String horiCars[]) {

        if (car - 2 >= 0 && carFront(car, horiCars) && horiCars[car - 2] == null) {
            return true;
        } else if (car - 1 >= 0 && !carFront(car, horiCars) && horiCars[car - 1] == null) {
            return true;
        }
        return false;
    }

    public void moving1() {
        for (int g = 0; g < horiCars.length; g++) {
            if (horiCars[g] != null) {
                if (moveLeft(g, horiCars)) {
                    if (carFront(g, horiCars)) {
                        output[g] = "Move " + horiCars[g] + " 1 to the left.";

                    } else {
                        output[g] = "Move " + horiCars[g] + " 2 to the left.";
                    }
                } else if (moveRight(g, horiCars)) {
                    if (!carFront(g, horiCars)) {
                        output[g] = "Move " + horiCars[g] + " 1 to the right.";
                    } else {
                        output[g] = "Move " + horiCars[g] + " 2 to the right.";
                    }
                }

            }
        }
    }

    public void moving2() {
        for (int i = 0; i < output.length; i++) {
            if (output[i] == null && horiCars[i] != null) {
                tryToSolve(i);
            }
        }
    }

    public void right1(String array[], int car) {
        array[car] = null;
        array[car + 2] = array[car + 1];

    }

    public void left1(String array[], int car) {
        array[car] = null;
        array[car - 2] = array[car - 1];
    }

    public void tryToSolve(int car) {
        String rCar = "";
        String lCar = "";
        boolean l = false;
        boolean r = false;
        int howManyR = 0;
        int howManyL = 0;
        // The closest car on the right, to the car, we're trying to move.
        Integer rightCar = findCarRight(car);
        Integer fRightCar = findCarRight(car);

        // The closest car on the left, to the car, we're trying to move.
        Integer leftCar = findCarLeft(car);
        Integer fLeftCar = findCarLeft(car);

        while (!moveRight(car, tempHori) && !moveLeft(car, tempHori)) {
            if (rightCar != null) {
                if (moveRight1(rightCar, tempHori)) {

                    right1(tempHori, rightCar);
                    howManyR++;
                    if (moveRight(car, tempHori)) {
                        rCar = tempHori[rightCar + 1];
                        r = true;
                        break;
                    }
                    rightCar = findCarRight(rightCar + 1);
                    Integer x = findCarLeft(rightCar);
                    while (x!=null && !horiCars[car].equals(tempHori[x]) ) {
                      if (moveRight1(x,tempHori)){
                          right1(tempHori,x);
                      }  
                      if(moveRight(car,tempHori)){
                          r = true;
                          break;
                      } else {
                          x=findCarLeft(x);
                      }
                      
                    }
                }
            }
            if (leftCar != null) {
                if (moveLeft1(leftCar, tempHori)) {
                    left1(tempHori, leftCar);
                    howManyL++;
                    if (moveLeft(car, tempHori)) {
                        lCar = tempHori[leftCar - 1];
                        l = true;
                        break;
                    }
                    leftCar = findCarLeft(leftCar - 1);
                    Integer x = findCarRight(leftCar);
                    while (x!=null && !horiCars[car].equals(tempHori[x]) ) {
                      if (moveLeft1(x,tempHori)){
                          left1(tempHori,x);
                      }  
                      if(moveLeft(car,tempHori)){
                          l = true;
                          break;
                      } else {
                          x=findCarRight(x);
                }
            }
        }
        if (r) {
            output[car] = "First Move " + rCar + " " + howManyR + " to the right, then move " + horiCars[car] + " to the right";
        } else if (l) {
            output[car] = "First Move " + lCar + " " + howManyL + " to the left, then move " + horiCars[car] + " to the left";
        }

    }}}

    public Integer findCarRight(int st) {
        int h = st;
        String car = horiCars[st];

        while (h < horiCars.length && horiCars[h] == car || h < horiCars.length && horiCars[h] == null) {
            h++;
        }
        if (h < horiCars.length) {
            return h;
        }
        return null;
    }

    public int findCarLeft(int st) {
        int h = st;
        String car = horiCars[st];
        while (h >= 0 && horiCars[h] == car || h >= 00 && horiCars[h] == null) {
            h--;
        }
        return h;
    }

    public boolean moveRight(int car, String horiCars[]) {
        if (!carFront(car, horiCars) && car + 2 < horiCars.length && horiCars[car + 2] == null) {
            return true;
        } else if (carFront(car, horiCars) && car + 1 < horiCars.length && car + 2 < horiCars.length && horiCars[car + 1] == null && horiCars[car + 2] == null) {
            return true;
        }
        return false;
    }

    public boolean moveRight1(int car, String horiCars[]) {
        if (!carFront(car, horiCars) && car + 2 < horiCars.length && horiCars[car + 2] == null) {
            return true;
        } else if (carFront(car, horiCars) && car + 1 < horiCars.length && horiCars[car + 1] == null) {
            return true;
        }
        return false;
    }
    private void mainButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainButtonMouseClicked
        //Input exists?
        outputField.setText("");
        if (inputField.getText().isEmpty()) {
            outputField.setText("Bitte überprüfen Sie ihre Eingabe!");
        } else {
            //Getting input
            input = inputField.getText().split("\\r?\\n");

            //Detecting how many cars there are parked vertically.
            char letter = input[0].charAt(input[0].length() - 1);

            int placeInAlphabet = getNumber(letter);

            cars = new String[placeInAlphabet];
            horiCars = new String[placeInAlphabet];
            tempHori = new String[placeInAlphabet];
            output = new String[placeInAlphabet];
            parkFree = new boolean[placeInAlphabet];

            assignHorizontalCars();
            tempHori = horiCars;
//            System.out.println(carFront(5));
//            System.out.println(moveRight(3));
            moving1();
            moving2();
            
            for (int h = 0; h < output.length; h++) {
                System.out.println(output[h]);
            }
            System.out.println(findCarRight(0));
        }
    }//GEN-LAST:event_mainButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(schiebeparkplatz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(schiebeparkplatz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(schiebeparkplatz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(schiebeparkplatz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new schiebeparkplatz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea inputField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton mainButton;
    private javax.swing.JTextArea outputField;
    // End of variables declaration//GEN-END:variables
}
