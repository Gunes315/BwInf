/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Guene
 */
public class schiebeparkplatz extends javax.swing.JFrame {

    /**
     * Creates new form schiebeparkplatz
     */
    public schiebeparkplatz() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        outputField = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        inputField = new javax.swing.JTextArea();
        mainButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        outputField.setColumns(20);
        outputField.setLineWrap(true);
        outputField.setRows(5);
        jScrollPane1.setViewportView(outputField);

        inputField.setColumns(20);
        inputField.setRows(5);
        inputField.setText("A G\n2\nH 2\nI 5");
        jScrollPane2.setViewportView(inputField);

        mainButton.setText("Autos schieben");
        mainButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mainButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mainButton)
                .addGap(150, 150, 150))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(mainButton)
                .addGap(36, 36, 36))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   public int carsLeft;
    public int carsRight;
    //entire input
    public String[] input;

    //Horizontally parked cars (If car A is parked in 0 and 1 horiCars[0] and horiCars[1] is A)
    public String[] horiCars;
    public String[] alphabet = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"};

    public void assignHorizontalCars() {
        int h = Integer.parseInt(input[1]);

        //Assign Car names of horizontally parked cars to StringArray horiCars
        //Repeat for number of horizontal cars
        for (int i = 2; i < 2 + h; i++) {
            int begSpace = Integer.parseInt(input[i].substring(2));
            String letter = input[i].substring(0, 1);
            horiCars[begSpace] = letter;
            horiCars[begSpace + 1] = letter;
        }
    }

    public boolean carFront(int car, String horiCars[]) {
        String a = horiCars[car];
        if (car >= 0 && car + 1 < horiCars.length && horiCars[car + 1] == a) {
            return false;
        }
        return true;
    }

    public int getNumber(char letter) {
        //pia = Place in Alphabet
        int pia = 1 + (int) letter - (int) 'A';
        return pia;
    }

    public String movingLeft(Integer car) {
        carsLeft = 0;
        String order = "";
        int blankCount = 0;
        int counter = car;
        if (carFront(car, horiCars)) {
            while (counter >= 0 && blankCount < 1) {
                if (horiCars[counter] == null) {
                    blankCount++;
                }
                counter--;
            }
        } else {
            while (counter >= 0 && blankCount < 2) {
                if (horiCars[counter] == null) {
                    blankCount++;
                }
                counter--;
            }

        }

        counter = counter + 1;
        if (carFront(car, horiCars) && blankCount == 1 || !carFront(car, horiCars) && blankCount == 2) {
            for (int i = counter; i <= car; i++) {

                int blank = 0;
                if (horiCars[i] != null) {
                    if (!carFront(i, horiCars)) {
                        i++;
                    }
                    for (int o = counter; o <= i; o++) {
                        if (horiCars[o] == null) {
                            blank++;
                        }
                    }
                    if (blank != 0) {
                        carsLeft++;
                        order = order + "Move car " + horiCars[i] + " " + blank + " to the left. ";
                    }
                }
            }
        }
        return order;
    }

    public String movingRight(Integer car) {
        carsRight = 0;
        String order = "";
        int blankCount = 0;
        int counter = car;
        if (carFront(car, horiCars)) {
            while (counter < horiCars.length && blankCount < 2) {
                if (horiCars[counter] == null) {
                    blankCount++;
                }
                counter++;
            }
        } else {
            while (counter < horiCars.length && blankCount < 1) {
                if (horiCars[counter] == null) {
                    blankCount++;
                }
                counter++;
            }

        }

        counter = counter - 1;
        if (carFront(car, horiCars) && blankCount == 2 || !carFront(car, horiCars) && blankCount == 1) {
            for (int i = car; i <= counter; i++) {

                int blank = 0;
                if (horiCars[i] != null) {
                    if (!carFront(i, horiCars)) {
                        i++;
                    }
                    for (int o = i; o <= counter; o++) {
                        if (horiCars[o] == null) {
                            blank++;
                        }
                    }
                    if (blank != 0) {
                        carsRight++;
                        order = order + "Move car " + horiCars[i] + " " + blank + " to the right. ";
                    }
                }
            }
        }
        return order;
    }

    public void connection() {
        for (int i = 0; i < horiCars.length; i++) {
            if (horiCars[i] != null) {
                movingRight(i);
                movingLeft(i);
                if (carsRight <= carsLeft && carsRight != 0 || carsRight != 0 && carsLeft == 0) {
                    outputField.append(alphabet[i] + " : ");
                    outputField.append(movingRight(i) + "\n");
                } else {

                    outputField.append(alphabet[i] + " : ");
                    outputField.append(movingLeft(i) + "\n");
                }
            } else {
                outputField.append(alphabet[i] + " : " + "\n");
            }
        }
    }
    private void mainButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainButtonMouseClicked
        //Input exists?
        outputField.setText("");
        if (inputField.getText().isEmpty()) {
            outputField.setText("Bitte überprüfen Sie ihre Eingabe!");
        } else {
            //Getting input
            input = inputField.getText().split("\\r?\\n");

            //Detecting how many cars there are parked vertically.
            char letter = input[0].charAt(input[0].length() - 1);

            int placeInAlphabet = getNumber(letter);

            horiCars = new String[placeInAlphabet];

           

            assignHorizontalCars();

            connection();
        }
    }//GEN-LAST:event_mainButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(schiebeparkplatz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(schiebeparkplatz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(schiebeparkplatz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(schiebeparkplatz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new schiebeparkplatz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea inputField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton mainButton;
    private javax.swing.JTextArea outputField;
    // End of variables declaration//GEN-END:variables
}
